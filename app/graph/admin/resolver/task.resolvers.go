package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/kensei18/enechain-technical-assignment/app/graph/admin"
	"github.com/kensei18/enechain-technical-assignment/app/graph/model"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input model.TaskInput) (*model.CreateTaskPayload, error) {
	panic(fmt.Errorf("not implemented: CreateTask - createTask"))
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationResolver) UpdateTask(ctx context.Context, input model.TaskUpdateInput) (*model.UpdateTaskPayload, error) {
	panic(fmt.Errorf("not implemented: UpdateTask - updateTask"))
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTask - deleteTask"))
}

// GetTasks is the resolver for the getTasks field.
func (r *queryResolver) GetTasks(ctx context.Context, companyID string) ([]*model.Task, error) {
	panic(fmt.Errorf("not implemented: GetTasks - getTasks"))
}

// Company is the resolver for the company field.
func (r *taskResolver) Company(ctx context.Context, obj *model.Task) (*model.Company, error) {
	panic(fmt.Errorf("not implemented: Company - company"))
}

// Assignees is the resolver for the assignees field.
func (r *taskResolver) Assignees(ctx context.Context, obj *model.Task) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Assignees - assignees"))
}

// Author is the resolver for the author field.
func (r *taskResolver) Author(ctx context.Context, obj *model.Task) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Author - author"))
}

// AuthorID is the resolver for the AuthorId field.
func (r *taskInputResolver) AuthorID(ctx context.Context, obj *model.TaskInput, data string) error {
	panic(fmt.Errorf("not implemented: AuthorID - AuthorId"))
}

// Task returns admin.TaskResolver implementation.
func (r *Resolver) Task() admin.TaskResolver { return &taskResolver{r} }

// TaskInput returns admin.TaskInputResolver implementation.
func (r *Resolver) TaskInput() admin.TaskInputResolver { return &taskInputResolver{r} }

type taskResolver struct{ *Resolver }
type taskInputResolver struct{ *Resolver }
